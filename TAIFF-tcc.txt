
Um input  para que seja digitado o modelo.
Caso ja haja um teste no banco de dados, uma modal descerá na tela e mostrará os testes disponiveis para o modelo.
Caso não haja testes o usuario pode gravar um novo.

Abaixo ficará os campos para que seja digitado as posições desejada pelo usuário para executar o teste.

Caso o usuario movimente o equipamento testado para uma posição não correlacional ao teste requirido, os novos eixos serão gravados como um novo teste.


	ROTEIRO DE TESTES

Selecionar teste com base no nome do produto.
Método: GET
Endpoint: /posição/teste
Resposta: a) Código 200, retorna com um array dos testes existentes. Caso um deles seja selecionado, retorna um array de objetos (coordenadas). 
b) Código 404, retorna vazio.  

Incremento ou decremento dos valores de cada coordenada que movem os eixos em tempo real. É possível adicionar mais pontos ao roteiro (Novo Ponto). Memória local.
Método: Serial
Endpoint: Nenhum

Definir Zero Peça
Método: POST
Endpoint: /posição/0peca
Conteúdo: Objeto (coordenadas)
{
	X: 2,
	Y: 8,
	Z: 9		
}
Resposta: a) Código 201, criado com sucesso.
b) Código 500, erro ao criar.

Mover para Zero Peça
Método: GET e depois Serial
Endpoint: /posição/0peca
Resposta: a) Código 200, retorna um objeto (coordenadas). 
b) Código 404, retorna vazio.  


Mover para Zero Máquina (valor constante)
Método: Serial

Iniciar teste 
Método: Serial

Salvar teste
Método: PUT (para criar ou editar)
Endpoint: /posição/teste
Conteúdo: Array de objetos (coordenadas) + ID do produto + ID do teste
Resposta: a) Código 201, criado com sucesso.
b) Código 200, editado com sucesso.
c) Código 500, erro.



openapi: 3.0.0
info:
  version: 1.0.0
  title: TAIFF
  description: Projeto para o 3º semestre do CT Desenvolvimento de Sistemas.
paths:
  /posicao:
    post:
      description: Pedido de uma nova coordenada para movimentação. 
      tags:
      - "Movimentação"
      requestBody:
        description: Optional description in <mark>**Markdown**</mark>
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Posicoes'
      responses:
        '200':
          description: Resposta bem sucedida
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Temperaturas'
  
  /temperatura-ambiente:
    get:
      tags:
      - "Coleta de Temperatura"
      responses:
        '200':
          description: "Payload de retorno (temperatura ambiente)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Temperaturas'

components:
  schemas:
    Posicoes:
      type: object
      properties:
        x:
          type: integer
          example: 10
        y:
          type: integer
          example: 15
        z:
          type: integer
          example: 20
    Temperaturas:
      type: object
      properties:
        t1:
          type: integer
          example: 10
        termopar2:
          type: integer
          example: 15
        termopar3:
          type: integer
          example: 20
      
                *************************-----------****************

API TCC

openapi: 3.0.0
info:
  version: 0.1.0
  title: Software de testes
  description: Projeto para o 3º semestre do CT Desenvolvimento de Sistemas. <br>Software para gerenciamento de mesa inteligente desenvolvida para a empresa TAIFF.
  
servers:
  - url: http://localhost:8080
    description: Servidor para o consumo dos end-points
paths:
  /posicao/teste/{produtoNome}:
    get:
      tags:
        - "Testes"
      summary: "Busca os testes pelo nome do produto"
      description: "Busca todos os testes referentes ao produto"
      parameters:
        - name: produtoNome
          in: path
          required: true
          description: Parameter description in CommonMark or HTML.
          schema:
            type: string
            format: utf-8
            minimum: 1
      responses: 
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/testesArray'
        '404':           
          description: Não encontrado
        '400':
          description: Valor inválido
        '500':
          description: Falha na comunicação com o servidor
          
  /posicao/teste:
    put:
      tags:
      - 'Testes'
      summary: 'Cria ou edita um modelo de teste'
      description: 'Cria ou edita um modelo de teste'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/testes'
      responses:
        '200':
          description: OK
        '201':
          description: Teste criado com sucesso
        '404':           
          description: Não encontrado
        '400':
          description: Valor inválido
        '500':
          description: Falha na comunicação com o servidor
          
  /posicao/teste/{id_teste}:
    delete:
      tags:
        - "Testes"
      summary: "Deletar teste pelo id"
      description: "Deletar teste pelo id"
      parameters:
        - name: id_teste
          in: path
          required: true
          description: Id do teste a ser excluído.
          schema:
            type: integer
            format: int64
      responses: 
        '200':
          description: OK
        '404':           
          description: Não encontrado
        '400':
          description: Valor inválido
        '500':
          description: Falha na comunicação com o servidor
          
  /posicao/zeroPeca:
    post:
      tags: 
      - 'Zero peça'
      summary: 'Define a posição do zero peça'
      description: 'Define a posição do zero peça'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/coordenadasZeroPeca'
      responses:
        '201':
          description: Teste criado com sucesso
        '400':
          description: Valor inválido
        '500':
          description: Falha na comunicação com o servidor
          
  /posicao/zeroPeca/{id_teste}:
    get:
      tags: 
      - 'Zero peça'
      summary: 'Pega a posição do zero peça'
      description: 'Pega a posição do zero peça'
      parameters:
        - name: id_teste
          in: path
          required: true
          description: ID do teste para pegar o zero peça do teste.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/coordenadasZeroPeca'
        '400':
          description: Valor inválido
        '404':
          description: Teste não encontrado
        '500':
          description: Falha na comunicação com o servidor
      

components:
  schemas:
    testesArray:
      type: object
      properties:
        testes:
          type: array
          items:
            $ref: '#/components/schemas/testes'
            
    coordenadasZeroPeca:
      type: object
      properties:
        id_teste:
          type: integer
          format: int64
          example: 1
        x:
          type: integer
          format: int64
          example: 30
        y:
          type: integer
          format: int64
          example: 55
        z:
          type: integer
          format: int64
          example: 15
      
            
    coordenadas:
      type: object
      properties:
        x:
          type: integer
          format: int64
          example: 30
        y:
          type: integer
          format: int64
          example: 55
        z:
          type: integer
          format: int64
          example: 15
        r:
          type: integer
          format: int64
          example: 25
        t:
          type: integer
          format: int64
          example: 45
          
    
    testes:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        nome:
          type: string
          format: utf-8
          example: teste-parado
        coordenadas:
          type: array
          items:
            $ref: '#/components/schemas/coordenadas'
        zero_peca: 
          type: object
          $ref: '#/components/schemas/coordenadasZeroPeca'
